generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

model Board {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title         String
  imageId       String
  imageThumbUrl String
  imageFullUrl  String
  imageUserName String
  imageLinkHTML String

  orgId String

  lists List[]
}

model List {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  order Int

  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  cards Card[]

  @@index([boardId])
}

model Card {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  order       Int
  description String?

  listId String
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@index([listId])
}

model AuditLog {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  action ACTION

  entityId    String
  entityType  ENTITY_TYPE
  entityTitle String

  userId    String
  userName  String
  userImage String

  orgId String
}

model OrgLimit {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orgId String @unique

  count Int @default(0)
}

model OrgSubscription {
  id String @id @default(uuid())

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  orgId String @unique
}
